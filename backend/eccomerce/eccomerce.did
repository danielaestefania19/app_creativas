type Rating = variant {
   Zero;
    One;
    Two;
    Three;
    Four;
    Five;
};
type Review = record {
    rating: Rating;
    review: text;
    reviewer: opt principal;
};
type KeyPrincipal = record{
    key: principal;
};
type CreateReview = record {
    item_id: nat64;
    rating: nat64;
    review: text;
};

type AddProfilePicture = record {
    profile_picture: text;
};


type Address = record {
    country: text;
    state: text;
    postal_code: text;
    phone_number: text;
    city: text;
    address: text;
};
type UserAddress = record {
    address_user: opt principal;
    addresses: opt vec Address;
};

type CreateUserAddress = record {
    address: Address;
};

type AddressEdit = record {
    country: opt text;
    state: opt text;
    postal_code: opt text;
    phone_number: opt text;
    city: opt text;
    address: opt text;
};

type UserAddressEdit = record {
    address: AddressEdit;
};

type PurchaseStatus = variant {
    Started;
    Paid;
    Shipped;
    Delivered;
    Completed;
    Refunded;
    Disputed;
};

type Purchase = record {
    item_id: nat64;
    amount: nat64;
    name: text;
    lastname: text;
    buyer: opt principal;
    account_buyer: text;
    status: PurchaseStatus;
    payment_id: nat64;
    seller: opt principal;
    account_seller: text;
    contract_address: text;
    shipping_address: Address;
};

type CreatePurchase = record {
    item_id: nat64;
    amount: nat64;
    name: text;
    lastname: text;
    account_buyer: text;
    payment_id: nat64;
    id_shipping_address: nat64; // Cambia nat64 a nat
};    

type CreateItem = record {
    item: text;
    price: nat64;
    description: text;
    image: text;
    contract_address: text;
    billing_address: text;
    stock: nat64;
    category: text;
};
type UpdateItem  = record {
    price: opt nat64;
    description: opt text;
    image: opt text;
    stock: opt nat64;
};
type Vote = record { 
    voter: principal; 
    rating: Rating;
};

type Category = variant {
    Electronics;
    ClothingShoesAccessories;
    HomeKitchen;
    BeautyPersonalCare;
    Books;
    SportsOutdoor;
    FoodBeverages;
    HomeImprovement;
    Baby;
    PetsAccessories;
};

type Item = record {
    item: text;
    price: nat64;
    description: text;
    image: text;
    reviews: vec Review; // Agrega este campo
    owner: opt principal;
    contract_address: text;
    billing_address: text;
    stock: nat64;
    category: Category;
};

type Card = record {

    item_id: nat64;
    item: Item;
    amount: nat64;
};


type AddItem = record {
 
 item: nat64;
 amount: nat64;
};


type ShippingCard = record {
  card: vec Card;
  total_price: nat64;
};

type OwnerItemCard = record {
  
  owner: principal;
  item: nat64;
};

type BoolStorable = record {
  
 bool: bool;
};

type UpdateAction = variant {
    Add;
    Remove;
};

type ItemError = variant {
    AlreadyExist;
    ItemNotAllowed;
    NotExist;
    Unauthorized;
    UpdateError;
    NoItemsAssociated;
    InvalidOwner;
    AlreadyVoted; // Agrega este error
    NoVotes; // Agrega este error
    ItemNotFound; // Agrega este error
    InvalidRating;
    OutOfStock;
};


type Result_get_category = variant {
    Ok: vec record { nat64; Item };
    Err: ItemError;
};

type Result = variant {
    Ok;
    Err: ItemError;
};


type Result_item = variant {
    Ok: Item;
    Err: ItemError;
};


type Result_get = variant {
    Ok: text;
    Err: ItemError;
};

type Result_get_owner = variant {
    Ok: principal;
    Err: ItemError;
};


type ResultItems = variant {
    Ok: vec record { nat64; Item };
    Err: ItemError;
};

type Result_get_address = variant {
    Ok: vec record { nat64; Address }; // Cambia nat a nat64
    Err: ItemError;
};
 
type Result_get_address_by_id = variant {
    Ok: opt Address;
    Err: ItemError;
};


type Result_get_purchases = variant {
    Ok: vec Purchase;
    Err: ItemError
};



type Result_Bool = variant {
    Ok: bool;
    Err: ItemError;
};

type Result_get_user_card = variant {
    Ok: ShippingCard;
    Err: ItemError;
};

type Result_get_len_card = variant {
    Ok: nat64;
    Err: ItemError;
};


service : () -> {
    get_items : () -> (vec record { nat64; Item }) query;
    get_user_addresses : () -> (Result_get_address) query;
    set_item : (CreateItem) -> (Result);
    add_item_card : (AddItem) -> (Result);
    item_in_cart : (principal, nat64) -> (bool) query;
    get_user_cart : () -> (Result_get_user_card) query;
    get_total_price : () -> (Result_get_len_card) query;
    update_item_card : (AddItem, text) -> (Result);
    get_total_items_in_cart : () -> (Result_get_len_card) query;
    remove_item_from_cart : (nat64) -> (Result); 
    clear_cart : () -> (Result);
    associate_address : (CreateUserAddress) -> ();
    get_contract_address : (nat64) -> (Result_get) query;
    get_address_by_id : (nat64) -> (Result_get_address_by_id) query;
    create_purchase : (CreatePurchase) -> (Result);
    get_your_sales : () -> (Result_get_purchases) query;
    get_your_purchases : () -> (Result_get_purchases) query;
    get_item_billing_address : (nat64) -> (Result_get) query;
    get_item_owner : (nat64) -> (Result_get_owner);
    add_review : (CreateReview) -> (Result); 
    add_picture : (nat64, AddProfilePicture) -> (Result);
    update_address : (nat64, UserAddressEdit) -> (Result);
    update_item : (nat64, UpdateItem) -> (Result);
    remove_item : (nat64) -> (Result);
    get_item : (nat64) -> (Result_item) query;
    get_items_owner : () -> (ResultItems) query;
    get_items_by_category: (text) -> (Result_get_category) query;
    whoami : () -> (principal) query;
    manager : () -> (principal) query;
};